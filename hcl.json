{
    "data": {
        "aws_ami": {
            "ubuntu": {
                "filter": [
                    {
                        "name": "name",
                        "values": [
                            "ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"
                        ]
                    },
                    {
                        "name": "virtualization-type",
                        "values": [
                            "hvm"
                        ]
                    }
                ],
                "most_recent": true,
                "owners": [
                    "099720109477"
                ]
            }
        }
    },
    "provider": {
        "aws": {
            "access_key": "${var.access_key}",
            "region": "${var.region}",
            "secret_key": "${var.secret_key}"
        }
    },
    "resource": {
        "aws_cloudtrail": {
            "example1": {
                "cloud_watch_logs_group_arn": "aws:arn::logGroup:someLogGroup1:",
                "event_selector": {
                    "data_resource": {
                        "type": "AWS::Lambda::Function",
                        "values": [
                            "arn:aws:lambda"
                        ]
                    },
                    "include_management_events": true,
                    "read_write_type": "All"
                },
                "is_multi_region_trail": true
            }
        },
        "aws_cloudwatch_log_metric_filter": {
            "AuthorizeSecurityGroupIngress": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}"
            },
            "CMS": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }"
            },
            "CreateCustomerGateway": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }"
            },
            "CreateNetworkAcl": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }"
            },
            "CreateRoute": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }"
            },
            "CreateTrail": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging)}"
            },
            "CreateVpc": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) ||($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }"
            },
            "DeleteGroupPolicy": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
            },
            "KMS": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}"
            },
            "MFAUsed": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{$.eventName = \"ConsoleLogin\" || $.additionalEventData.MFAUsed\t!= \"Yes\"}"
            },
            "Root": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{$.userIdentity.type = \"Root\" || $.userIdentity.invokedBy NOT EXISTS || $.eventType != \"AwsServiceEvent\"}"
            },
            "consoleLogin": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\")}"
            },
            "s3": {
                "log_group_name": "someLogGroup",
                "metric_transformation": {
                    "name": "ConsoleWithoutMFACount",
                    "namespace": "someNamespace",
                    "value": "1"
                },
                "name": "console-without-mfa",
                "pattern": "{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }"
            }
        },
        "aws_cloudwatch_metric_alarm": {
            "console_without_mfa": {
                "alarm_actions": [
                    "someTopic"
                ],
                "alarm_description": "Use of the console by an account without MFA has been detected",
                "alarm_name": "console-without-mfa-us-west-2",
                "comparison_operator": "GreaterThanOrEqualToThreshold",
                "evaluation_periods": "1",
                "metric_name": "ConsoleWithoutMFACount",
                "namespace": "someNamespace",
                "period": "60",
                "statistic": "Sum",
                "threshold": "1"
            }
        },
        "aws_db_instance": {
            "default": {
                "allocated_storage": 10,
                "engine": "mysql",
                "engine_version": "5.7",
                "instance_class": "db.t2.micro",
                "name": "mydb",
                "parameter_group_name": "default.mysql5.7",
                "password": "foobarbaz",
                "storage_type": "gp2",
                "username": "foo"
            }
        },
        "aws_dms_replication_instance": {
            "test": {
                "allocated_storage": 20,
                "apply_immediately": true,
                "auto_minor_version_upgrade": true,
                "availability_zone": "us-west-2c",
                "engine_version": "1.9.0",
                "kms_key_arn": "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
                "multi_az": false,
                "preferred_maintenance_window": "sun:10:30-sun:14:30",
                "publicly_accessible": true,
                "replication_instance_class": "dms.t2.micro",
                "replication_instance_id": "test-dms-replication-instance-tf",
                "replication_subnet_group_id": "${aws_dms_replication_subnet_group.test-dms-replication-subnet-group-tf}",
                "tags": {
                    "Name": "test"
                },
                "vpc_security_group_ids": [
                    "sg-12345678"
                ]
            }
        },
        "aws_eip": {
            "ip": {
                "instance": "${aws_instance.example.id}"
            }
        },
        "aws_elb": {
            "bar": {
                "access_logs": {
                    "bucket": "foo",
                    "bucket_prefix": "bar",
                    "interval": 60
                },
                "availability_zones": [
                    "us-west-2a",
                    "us-west-2b",
                    "us-west-2c"
                ],
                "connection_draining": true,
                "connection_draining_timeout": 400,
                "cross_zone_load_balancing": true,
                "health_check": {
                    "healthy_threshold": 2,
                    "interval": 30,
                    "target": "HTTP:8000/",
                    "timeout": 3,
                    "unhealthy_threshold": 2
                },
                "idle_timeout": 400,
                "instances": [
                    "${aws_instance.foo.id}"
                ],
                "listener": [
                    {
                        "instance_port": 8000,
                        "instance_protocol": "http",
                        "lb_port": 80,
                        "lb_protocol": "http"
                    },
                    {
                        "instance_port": 8000,
                        "instance_protocol": "http",
                        "lb_port": 443,
                        "lb_protocol": "https",
                        "ssl_certificate_id": "arn:aws:iam::123456789012:server-certificate/certName"
                    }
                ],
                "name": "foobar-terraform-elb",
                "tags": {
                    "Name": "foobar-terraform-elb"
                }
            }
        },
        "aws_iam_account_password_policy": {
            "strict": {
                "allow_users_to_change_password": true,
                "minimum_password_length": 8,
                "require_lowercase_characters": false,
                "require_numbers": false,
                "require_symbols": true,
                "require_uppercase_characters": true
            },
            "strict_2": {
                "allow_users_to_change_password": true,
                "minimum_password_length": 8,
                "require_lowercase_characters": true,
                "require_numbers": true,
                "require_symbols": true,
                "require_uppercase_characters": true
            }
        },
        "aws_instance": {
            "example": {
                "ami": "${lookup(var.amis, var.region)}",
                "instance_type": "t2.micro",
                "provisioner": {
                    "local-exec": {
                        "command": "echo ${aws_instance.example.public_ip} > ip_address.txt"
                    }
                }
            }
        },
        "aws_launch_configuration": {
            "as_conf": {
                "image_id": "${data.aws_ami.ubuntu.id}",
                "instance_type": "t2.micro",
                "name": "web_config"
            }
        },
        "aws_lb": {
            "test": {
                "access_logs": {
                    "bucket": "${aws_s3_bucket.lb_logs.bucket}",
                    "enabled": true,
                    "prefix": "test-lb"
                },
                "enable_deletion_protection": true,
                "internal": false,
                "load_balancer_type": "application",
                "name": "test-lb-tf",
                "security_groups": [
                    "${aws_security_group.lb_sg.id}"
                ],
                "subnets": [
                    "${aws_subnet.public.*.id}"
                ],
                "tags": {
                    "Environment": "production"
                }
            }
        },
        "aws_rds_cluster": {
            "default": {
                "availability_zones": [
                    "us-west-2a",
                    "us-west-2b",
                    "us-west-2c"
                ],
                "cluster_identifier": "aurora-cluster-demo",
                "database_name": "mydb",
                "master_password": "barbut8chars",
                "master_username": "foo"
            }
        },
        "aws_rds_cluster_instance": {
            "cluster_instances": {
                "cluster_identifier": "${aws_rds_cluster.default.id}",
                "count": 2,
                "identifier": "aurora-cluster-demo-${count.index}",
                "instance_class": "db.r3.large"
            }
        },
        "aws_redshift_cluster": {
            "default": {
                "cluster_identifier": "tf-redshift-cluster",
                "cluster_type": "single-node",
                "database_name": "mydb",
                "master_password": "Mustbe8characters",
                "master_username": "foo",
                "node_type": "dc1.large"
            }
        },
        "aws_s3_bucket": {
            "example": {
                "acl": "private",
                "bucket": "terraform-getting-started-guide"
            },
            "example2": {
                "acl": "public",
                "bucket": "mah-bucket"
            }
        },
        "aws_sns_topic": {
            "security_alerts": {
                "arn": "someTopic",
                "name": "someTopic"
            }
        }
    }
}
